decorara clases con spring

@restController: Marca una clase como un controlador en una aplicación Spring y permite manejar solicitudes HTTP.

@getMapping : Define un endpoint HTTP para manejar solicitudes GET , Se usa para mapear una URL específica a un método de un controlador. EJ:
@GetMapping("/usuarios")
public List<Usuario> obtenerUsuarios() {
    return servicioUsuario.obtenerTodos();
}


@pathVariable: Vincula una variable de ruta de una URL al parámetro de un método en el controlador. Se usa cuando necesitas capturar partes de la URL como parámetros dinámicos. EJ:
@GetMapping("/usuarios/{id}")
public Usuario obtenerUsuarioPorId(@PathVariable Long id) {
    return servicioUsuario.buscarPorId(id);
}


*que es la logica de negocio: reglas y procesos que definen como opera una aplicacion o sistema en terminos de la manipulacion y procesamiento de datos.

*Micro Servicios:  desarmar los servicios que provee la aplicacion en metodos mas pequeños y de tareas especificas.

*arquitectura basada en capas: se manejan en 3 capas basicas, pero pueden haber mas

1.Capa de presentacion: suele ser minima en los microservicios o inexistente, porque los micro servicios generalmente no tienen interface de usuario directa,
en algunos casos un microservicio podria tener una api de interfaz de usuario para interactuar con otras partes del sistema o con aplicaciones externas,
en nuestro caso podrian ser los controladores.

2.Capa de logica de negocio (servicios): contiene principalemte los servicios, las clases que implementan la logica de negocio especifica del servicio y proporcionan una interfaz para interactuar con ella,
los servicios son responsables de implementar las reglas, realizar calculos, validar datos y coordinar operaciones.

3.capa de acceso a datos: interactua con la base de datos u otros sistemas de almacenamiento de datos.
en un microservicio cada servicio puede tener su propia base de datos o compartir una base de datos con otros microservicios.

4.capa de integracion: integra los microservicios con sistemas externos o con otros microservicios,
puede incluir componentes de comunicacion como clientes HTTP.

5. capa de seguridad: implementa las medidas de seguridad, como la autenticacion y la autorizacion para proteger el microserviciocontra accesos no autorizados.

*inyeccion de dependencias : reduce el acoplamiento entre componentes, facilita el mantenimiento y mejora escalabilidad

*version de control : trabaja con la inyeccion de dependencias, el control de la creacion y  gestion de obejtos se invierte, desde el codigo a un contenedor o framweork (ej spring)

*beans es un objeto o clase gestionada por spring ( que spring se encarga de ayudarlo con las tareas a realizar)

@Service : esta decoracion va en la clase que implementa los servicios dentro de la paquete service, y hace que el framwork se encargue de crear las instancias
de esa clase y asi poder inyectarlas en otras partes de la aplicacion cuando sea necesario.

@Autowired le indica a spring que debe inyectar automaticamente una dependencia en el lugar donde se declara. puede usarse en un constructor, metodo sett, o en un atributo de clase.

*JACSON es una biblioteca muy usada en java para procesar datos en formato json, algunas de sus funcionalidades son:
-Serializacion: convierte objetos java en representaciones json para ser almacenadas o transmitidas.
-deserializacion: transforma datos json en objetos java asi se puede trabajar con ellos

@Primary: existe para resolver conflictos cuando existen multiples beans del mismo tipo en el contexto de la aplicacion,
entonces esta anotacion define cual debe ser el primario de forma predeterminada

@Qualifier: se usa para especificar que beans debe ser inyectado cuando hay varios beans del mismo tipo

@ConditionalOnProperty: Permite que ciertos beans se registren si se cumplen ciertas condiciones basadas en las propiedades de configuracion,
Permite activar o desactivar beans dependiendo de las propiedades definidas en los archivos de configuracion applicaion.properties o application.iml
Uso : tiene 2 valores
-Name : especifica el nombre de la propiedad que se va a evaluar
-heavingValue : especifica el valor que debe tener la propiedad para que el bean sea registrado.

@Lazy el beans se crea cuando realmente se necesite, mejora el rendimiento de la aplicacion para no consumir recursos que puedan no usarse.
Uso

*Externalizacion de configuracion : es el proceso de separar los valores de configuracion de una aplicacion del codigo fuente, permitiendo que estos valores
se almacenen en archivos de configuracion( Applicaiont.propierties), variables de entorno o sistemas externos, facilita la gestio de la configuracion, ya que permite
modificarla sin cambiar el codigo, adaptarla a diferentes entornos (desarrollo,pruebas,produccion) mejorando la seguridad y el mantenimiento de la aplicacion.

@configuration indica que una clase proporciona definiciones de beans. Spring trata la clase como una fuente de configuraciones, podes crear un bean que se
conecte a una base de datos o que sirva como servicio en tu aplicacion.

@ConfigurationProperties: Permite mapear propiedades de configuracion externa a una clase(Como las definidas en application.propierties)
